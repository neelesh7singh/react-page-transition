{"version":3,"sources":["components/title.jsx","pages/home.jsx","pages/about.jsx","components/header.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","lineContent","lineContent2","line1","useRef","line2","useEffect","gsap","from","delay","ease","y","stagger","amount","className","ref","el","Home","About","Header","to","exact","activeStyle","fontWeight","color","routes","path","name","Component","App","onEnter","node","children","firstElementChild","lastElementChild","opacity","onExit","map","key","match","CSSTransition","in","timeout","classNames","unmountOnExit","Boolean","window","location","hostname","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRA0CeA,EAvCD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACxBC,EAAQC,iBAAO,MACfC,EAAQD,iBAAO,MAWnB,OATAE,qBAAU,WACRC,IAAKC,KAAK,CAACL,EAAOE,GAAQ,GAAK,CAC7BI,MAAO,GACPC,KAAM,aACNC,EAAG,GACHC,QAAS,CAAEC,OAAQ,SAEpB,CAACV,EAAOE,IAGT,wBAAIS,UAAU,cACZ,yBAAKA,UAAU,aACb,yBACEC,IAAK,SAACC,GACJb,EAAQa,GAEVF,UAAU,QAETb,IAGL,yBAAKa,UAAU,aACb,yBACEC,IAAK,SAACC,GACJX,EAAQW,GAEVF,UAAU,QAETZ,MChBIe,EAfF,WACX,OACE,yBAAKH,UAAU,SACb,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,cAC9C,6BACE,uBAAGY,UAAU,QAAb,0JCSOI,EAfD,WACZ,OACE,yBAAKJ,UAAU,SACb,kBAAC,EAAD,CAAOb,YAAY,cAAcC,aAAa,eAC9C,6BACE,uBAAGY,UAAU,QAAb,0J,OCYOK,EAjBA,WACb,OACE,yBAAKL,UAAU,UACb,kBAAC,IAAD,CAASM,GAAG,IAAIC,OAAK,EAACC,YAAa,CAAEC,WAAY,OAAQC,MAAO,QAAhE,QAGA,kBAAC,IAAD,CACEJ,GAAG,SACHC,OAAK,EACLC,YAAa,CAAEC,WAAY,OAAQC,MAAO,QAH5C,WCCAC,EAAS,CACb,CAAEC,KAAM,IAAKC,KAAM,OAAQC,UAAWX,GACtC,CAAES,KAAM,SAAUC,KAAM,QAASC,UAAWV,IA4D/BW,MAzDf,WACE,IAAMC,EAAU,SAACC,GACfxB,IAAKC,KACH,CAACuB,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACEvB,EAAG,GACHF,MAAO,GACPC,KAAM,eACNyB,QAAS,EACTvB,QAAS,CACPC,OAAQ,OAKVuB,EAAS,SAACL,GACdxB,IAAKa,GACH,CAACW,EAAKC,SAAS,GAAGC,kBAAmBF,EAAKC,SAAS,GAAGE,kBACtD,GACA,CACEvB,GAAI,GACJD,KAAM,eACNE,QAAS,CACPC,OAAQ,OAMhB,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,aACZW,EAAOY,KAAI,gBAAGX,EAAH,EAAGA,KAAME,EAAT,EAASA,UAAWD,EAApB,EAAoBA,KAApB,OACV,kBAAC,IAAD,CAAOW,IAAKX,EAAMN,OAAK,EAACK,KAAMA,IAC3B,gBAAGa,EAAH,EAAGA,MAAH,OACC,kBAACC,EAAA,EAAD,CACEC,GAAa,MAATF,EACJG,QAAS,KACTC,WAAW,OACXC,eAAa,EACbR,OAAQA,EACRN,QAASA,GAET,yBAAKhB,UAAU,QACb,kBAACc,EAAD,iBCjDEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCXNU,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,0BACvB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d30f5a75.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { gsap } from \"gsap\";\n\nconst Title = ({ lineContent, lineContent2 }) => {\n  let line1 = useRef(null);\n  let line2 = useRef(null);\n\n  useEffect(() => {\n    gsap.from([line1, line2], 0.8, {\n      delay: 0.8,\n      ease: \"power3.out\",\n      y: 64,\n      stagger: { amount: 0.15 },\n    });\n  }, [line1, line2]);\n\n  return (\n    <h1 className=\"page-title\">\n      <div className=\"line-wrap\">\n        <div\n          ref={(el) => {\n            line1 = el;\n          }}\n          className=\"line\"\n        >\n          {lineContent}\n        </div>\n      </div>\n      <div className=\"line-wrap\">\n        <div\n          ref={(el) => {\n            line2 = el;\n          }}\n          className=\"line\"\n        >\n          {lineContent2}\n        </div>\n      </div>\n    </h1>\n  );\n};\n\nexport default Title;\n","// rafce\nimport React from \"react\";\nimport Title from \"./../components/title\";\n\nconst Home = () => {\n  return (\n    <div className=\"inner\">\n      <Title lineContent=\"This is the\" lineContent2=\"Home page\" />\n      <div>\n        <p className=\"info\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Title from \"./../components/title\";\n\nconst About = () => {\n  return (\n    <div className=\"inner\">\n      <Title lineContent=\"This is the\" lineContent2=\"About page\" />\n      <div>\n        <p className=\"info\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <NavLink to=\"/\" exact activeStyle={{ fontWeight: \"bold\", color: \"red\" }}>\n        Home\n      </NavLink>\n      <NavLink\n        to=\"/about\"\n        exact\n        activeStyle={{ fontWeight: \"bold\", color: \"red\" }}\n      >\n        About\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Route } from \"react-router-dom\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { gsap } from \"gsap\";\n\nimport Home from \"./pages/home\";\nimport About from \"./pages/about\";\nimport Header from \"./components/header\";\n\nconst routes = [\n  { path: \"/\", name: \"Home\", Component: Home },\n  { path: \"/about\", name: \"about\", Component: About },\n];\n\nfunction App() {\n  const onEnter = (node) => {\n    gsap.from(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: 30,\n        delay: 0.6,\n        ease: \"power3.InOut\",\n        opacity: 0,\n        stagger: {\n          amount: 0.6,\n        },\n      }\n    );\n  };\n  const onExit = (node) => {\n    gsap.to(\n      [node.children[0].firstElementChild, node.children[0].lastElementChild],\n      0.6,\n      {\n        y: -30,\n        ease: \"power3.InOut\",\n        stagger: {\n          amount: 0.6,\n        },\n      }\n    );\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {routes.map(({ path, Component, name }) => (\n          <Route key={name} exact path={path}>\n            {({ match }) => (\n              <CSSTransition\n                in={match != null}\n                timeout={1200}\n                classNames=\"page\"\n                unmountOnExit\n                onExit={onExit}\n                onEnter={onEnter}\n              >\n                <div className=\"page\">\n                  <Component />\n                </div>\n              </CSSTransition>\n            )}\n          </Route>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}